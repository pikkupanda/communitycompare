---
conference: RubyConf
year: 2013
source: https://www.youtube.com/watch?v=KRuIXiq3eMc
automatic: false
duration: 0
speaker: Sandy Vanderbleek
title: ' How To Roll Your Own Ops Framework In Ruby (If You Really Have To)'
text: |
  0:16SANDY VANDERBLEEK: OK. So I&#39;m gonna talk
  0:18about how to write your own operations framework,
  0:22if you really have to. And that&#39;s the firstquestion.
  0:26Do you really have to? No. You don&#39;t. Other
  0:30people have written lots of different things,and if
  0:33you&#39;re working in Ruby, Chef is pretty greatand
  0:36it&#39;ll get you really far. So, and you know,
  0:40if you have to roll your own thing, it
  0:42doesn&#39;t mean you can&#39;t keep using Chef. We&#39;reusing
  0:46Chef, and the problems we&#39;re trying to solveare-
  0:52We want something that is very testable. Thatis
  0:55our first key desirable. And we need to be
  1:0able to test things rapidly at the unit level
  1:3and then integrate it, and then the biggestarea
  1:6of testing is acceptance testing.
  1:8We want to have our framework bring up real
  1:12machines and make assertions about the stateof those
  1:15machines. And we want to know that our framework
  1:19can bring up the machine&#39;s - you know, we
  1:22want continuous test running so we know wecan
  1:25deploy our infrastructure.
  1:27So we know we can build our infrastructureat
  1:29all times, so at, you know, three in the
  1:32morning when things are going bad, we don&#39;talso
  1:34have to deal with debugging our deploymentcode. So
  1:39that is the main desirable.
  1:41Right, before we decided to write our ownframework
  1:47at the company I&#39;m working at, we&#39;ve beenusing
  1:51CloudWatch on AWBS. Not CloudWatch. CloudFormation Templates. And
  1:56stuff like that. They&#39;re slow and it was hard,
  2:0they&#39;re hard to test. So just, designing thisframework
  2:3with tests first is a big, big thing.
  2:8So, and then the, the rest of the standard
  2:10stuff. We need to be available. Everythingfor us
  2:13is based around high availability. Everythingis pretty much
  2:16a cluster with a load balancer. So we have
  2:20no single point of failure.
  2:20And this has to apply to our, what&#39;s running
  2:23our, you know, operations framework, too.The, the servers
  2:27that our ops is running on need to be
  2:29high availa- highly available, too. So itneeds to
  2:33bootstrap itself from a local machine intoa cluster
  2:37mode, and run like that.
  2:40Debugability is big. When a deployment failswe need
  2:44to get on our machines, see why it fails,
  2:46see what&#39;s going on. The whole system is based
  2:49on the system of swapping out an already running
  2:51cluster with the new, newly deployed custer.So, and
  2:55we, we want to keep that old cluster around,
  2:58if you can, I mean that&#39;d be nice, in
  2:59case the new one has some problems - just
  3:2swap back.
  3:3So, also audit-able is a big thing. We want
  3:6to know what&#39;s going on every transition ofour
  3:12operations resource, we want to know why ittriggered
  3:16and it wasn&#39;t successful. You know, how longhas
  3:17it taken, we want to know average deploy times,
  3:20average fail times, et cetera. Want to beable
  3:24to run those analytics.
  3:26So what&#39;s wrong with just Chef? So Chef server
  3:30is what you would go to to kind of
  3:32provide this whole, you know, framework formanaging your
  3:34settings, managing your machines, doing servicediscovery, stuff like
  3:39that. And to make that highly available isnon-trivial.
  3:46And you know Chef-spec, the testing, you knowthat,
  3:48one of the testing libraries that is out there
  3:50for it, it&#39;s just pretty much a unit test.
  3:53It just doesn&#39;t actually do anything. It justtests
  3:56your code, and you know, can it run.
  3:59And there are some other tools out there,like
  4:1Cucumber-Chef, which it comes from this bugtest-driven infrastructure
  4:8using chef, and you get to write cucumbertests
  4:12that say, like, real machines, it deploysactual AWS
  4:16resources and then runs your tests on thoseservers.
  4:20So that&#39;s a pretty cool tool. It&#39;s, it&#39;s not
  4:24really under active development right now,and it&#39;s not
  4:29quite flexible for what we wanted to do. And
  4:32something really cool that&#39;s coming out withthe same
  4:34people who did Chef-Spec is Test Kitchen.
  4:36I don&#39;t know if anyone&#39;s seen this, but it,
  4:39it definitely is what we&#39;re aiming to do from
  4:41the testing standpoint. So, but it&#39;s underwraps and
  4:46all that.
  4:47So here are the components that I came up
  4:50with for this framework. It&#39;s all API based.So
  4:53we have ops, basically, as a API service where,
  4:57and, just, developers can make API calls froma,
  5:2from Perl or whatever. Or there&#39;s also a front-end
  5:5component that I built in JavaScript.
  5:8So the API is like, you know, access, it&#39;s
  5:14just your, your single point of control. Thenall
  5:17the, you know, our business logic is in the
  5:20domain. The domain layer. And that&#39;s thingslike, what
  5:24we consider part of our deployment process.We built
  5:27images, we deploy clusters, we have some settingsand
  5:33users with permissions. So that&#39;s basicallyour domain.
  5:37And then the ops is like the whole meat
  5:39of it. This is all the nasty stuff, working
  5:41with your cloud library, working with, youknow, Unix,
  5:45getting all of the things done that you need
  5:48to get done to make your domain a reality.
  5:51We have a database for persistence. We&#39;reusing MongoDB
  5:55in a cluster. So the database isn&#39;t that important.
  6:0Whatever you&#39;re gonna use just needs to bereliable.
  6:4And then the frontend - it can be a
  6:7app, a command line, whatever. That&#39;s whyyou make
  6:12the API, so you have that flexibility at the
  6:14front-end level.
  6:15So the API - we have end points. It&#39;s
  6:19just rack, so it&#39;s pretty simple. We&#39;re usingGrape.
  6:23Grape is really nice for writing quick APIsin
  6:28Ruby. Grape has entities which are map, domainobjects
  6:34to the JSON representation. We&#39;re just usingJSON and
  6:38JSON out.
  6:40So and then when we consume a representationthat
  6:42a client has messed with, it&#39;s called a representation
  6:46right now which is not a great name. But
  6:48that&#39;s to take a representation and go backinto
  6:51the domain layer from there. Then serviceskind of
  6:57act as the interface to the domain and ops
  6:59layer for the API, so it&#39;s not highly coupled
  7:2to what&#39;s going on there.
  7:4And the client&#39;s, the API provides some clients,just
  7:9rest clients basically. Everything is restful.So there are,
  7:12there are a couple of client objects in the
  7:14API layer that you could use for a command
  7:16line inside the ops.
  7:20Wherever you need it. And executation is aabstraction
  7:24for the API to say go do something, I&#39;m
  7:27gonna respond to the client, and some workis
  7:30gonna go on in the background.
  7:32And there&#39;s a, I extracted it because there&#39;sa
  7:34couple different ways, just for getting started.Just want
  7:37to fork, you know, but we use AWS flows
  7:42a lot, to do a lot of our work,
  7:43so. I wanted to make it flexible enough so
  7:45that when we plug it into our flow infrastructure,
  7:49we can run our tasks like that.
  7:53So at the domain layer we have resources which
  7:56have states and logic, and then there areprovisioners,
  7:59which are state machines over these resources.So states,
  8:4for example, image has a pending state, abuilding
  8:8state, a built state, a destroyed state, etcetera.
  8:11And the provisioner is the state machine that&#39;sgonna
  8:14run through all those states which transitionsusing success
  8:17and failure, and all this happens in the background,
  8:22usually when you ask for a resource to change
  8:24state. Provisioner is gonna determine whatit needs to
  8:27do to change that state, and then go about
  8:29doing that.
  8:30And that uses the ops layer, where the providers
  8:34are basically controlled by the provisionersin the machines.
  8:38They communicate using just success and failureand pass
  8:41an options hash. And then the ops has a
  8:44lot of, you know, tools to use the cloud
  8:46services, so we can get things done on the
  8:48cloud.
  8:49And very important are the testing tools toprove
  8:52that the things actually got done on the cloud.
  8:54We want to know processes are running, files,directories,
  8:57everything is set up. Everything is good.OK.
  9:1And the database. It&#39;s just a database. Weuse
  9:3it to store data. There are mappers that map
  9:7the resources to MongoDB and back. It usesthe
  9:10data mapper pattern. Perpetuity is a coolgem. Right
  9:15now it just works with Mongo, but they&#39;readding
  9:17a postgres SQL to it.
  9:20So I also looked into Ram, RV, which is
  9:23pretty cool, but definitely not ready foruse. Tried
  9:27to keep the, you know, model persistence outof
  9:34the domain layer, you know, not ActiveRecordstyle. Data
  9:38mapper is a, is the pattern. It&#39;s in patterns
  9:42of enterprise architecture. If you haven&#39;theard of it,
  9:46definitely check it out.
  9:48So the resources transition between states.Transitions are also
  9:52resourced. This is part of the audibility.You want
  9:55to know, you know, every transition. So ourresources
  10:0are image clusters, settings, users, permissions,right now. It&#39;s
  10:4pretty simple.
  10:8The providers are the implementations of eachresource state.
  10:13So this is in the ops layer. And you
  10:16write a provider, you&#39;ll write, like a methodcalled
  10:18build, if you&#39;re image provider, and thenyou&#39;ll have
  10:21like a method pending, build pending, andjust, that
  10:26method is called when that resource is gonnago
  10:29into that state. So you need to do everything
  10:32that will make that resource in the state,and
  10:35then say success inside the provider if you,you
  10:37know, if you achieved it.
  10:39And then the provisioner will actually updatethe client
  10:43and let the resource know that it is in
  10:46that state at the API level. So the provisioner
  10:50is just the control object. It knows aboutthe
  10:53client and the only transition events aresuccess and
  10:57failure.
  10:58So it runs inside an execution with the run
  11:2ID as the transition. So a nice feature that
  11:6we don&#39;t have yet will be to take that
  11:8run ID and cancel, cancel transitions.
  11:13So another explaine flow, for images for usis,
  11:16we start in pending, we set up our, our
  11:20image on AWS. We go into a build_pending and
  11:24we, you know, run our, we install Ruby on
  11:27it. We do everything we want to have the
  11:29image set up. It takes awhile. And, well that&#39;s
  11:33actually the building state, sorry.
  11:36And then when it&#39;s built, we, you know, make
  11:38sure it&#39;s registered properly and everythinglike that. So
  11:42this framework lets us think in terms of state
  11:44machines, which I think is really valuable.Think about
  11:47state transitions and think about all youroperations resources
  11:50- all your operations, you know, things asresources
  11:53that have states that are gonna go throughstate
  11:55provisions as state transitions as you, youknow, deploy
  11:59things, make things happen.
  12:2So how do I make it, you know, more
  12:4of a framework, something reusable for everybody?
  12:8So right now it&#39;s, it&#39;s kind of hard. You
  12:10build your own subclass of resource provisionor provider
  12:13for, you know, your domain object, somethingyou want,
  12:16you know, to act as a operations resourcefor
  12:19you. And then you also have to do your
  12:22entity and endpoint service. And write themapper for
  12:25the database.
  12:26And so it&#39;s really like seven, at least seven
  12:29classes you&#39;re gonna create to make on operationsresource.
  12:33So that&#39;s pretty hard.
  12:36I&#39;ve looked into trying to make a DSL to
  12:39build the resource and provisioner, becausethey&#39;re very related.
  12:43It&#39;s basically the states and the state machine.But
  12:47the state machine is already - I&#39;m using a
  12:50workflow, it&#39;s already a state machine DSL.So, it&#39;s
  12:54hard to, to make frameworks on top of frameworks
  12:57sometimes. And lots of fast-level native programming.
  13:2So.
  13:3But it&#39;s interesting, and definitely the realmap is
  13:5to do that. There&#39;s already a DSL for the
  13:9API. It&#39;s great. And the frontend - I made
  13:13some interesting decisions cause I&#39;m a formerfront end
  13:16developer. So I&#39;m using EmberJs to just workwith
  13:20JSON. There&#39;s no frontend server. It&#39;s a staticJavaScript
  13:23app, self-contained. So would people be interestedin that?
  13:28It&#39;s kind of crazy. Also Emblem is a templating
  13:33language, and it&#39;s lime HML with handlebars.It&#39;s kind
  13:36of cool. Some cool stuff. So the goal is
  13:40definitely to opensource, you know, the workwe&#39;ve done,
  13:43and of course, profit. So what are our key
  13:47process benefits from this?
  13:49So we write acceptance tests using RSpectmatchers. They
  13:52run on the instances created by the API, that
  13:55is really big. Cause we, we could have had
  13:59a broken deployment for weeks, and had noidea
  14:1previously. You know, cause we weren&#39;t constanlytesting our
  14:5deployment infrastructure.
  14:8So when a deployment fails, we have SSH to
  14:11access the machine. We have a one stop shop
  14:13for settings and service discovery. Fail oversis a
  14:17fundamental construct. Swapping clusters backand forth.
  14:21And it is self-documenting, which is prettycool, using
  14:24Grape. You write a couple descriptions ofyour end
  14:29points, of your, you know, gets and puts,and
  14:31then I made a, an endpoint to represent the
  14:35endpoints, actually. So there&#39;s an entityfor the endpoint.
  14:38So the actual API endpoints can be, outputis
  14:41JSON representations, and then you can askfor documentation
  14:44is JSON.
  14:45So that was pretty cool. But, yeah, it&#39;s not
  14:49done yet. Lots of work. And right now it&#39;s
  14:52kind of monolithic, which is a little bita
  14:55problem because we need to integrate lotsof different
  14:58tools that ops developers are building, andthey don&#39;t
  15:1all fit or, you know, they already work, and
  15:5how do we in them into this provisioner or
  15:8provider model. It&#39;s a little heavy weightfor some
  15:10lightweight tools.
  15:12So I&#39;m gonna show a couple examples of the
  15:16frontend.
  15:17So bootstrap three. It&#39;s very nice and clean.We
  15:22have the resource dates on the clusters, pendingdown
  15:26up, some actions and we have a little menu
  15:30to go through our deployments. Some of these,these
  15:33are just mocks, basically. The whole thing&#39;snot working.
  15:36We want monitors eventually. We get pageda lot
  15:41and sometimes we don&#39;t know if, well if we
  15:44got paged or if it was just transient.
  15:45So we want a page to look at really
  15:47quick, you know, just to see if, basicallya
  15:50sanity check to see if, do we really need
  15:53to, you know, get up at three in the
  15:54morning, get on the computer and get on these
  15:57servers and see what&#39;s up.
  15:59So, oh yeah. And the nice thing about using
  16:2this with bootstrap is it&#39;s definitely gonnawork on
  16:4a mobile phone, so you&#39;ll be able to locate
  16:8it on your phone in bed. Yeah.
  16:14And this will change our life. This is a
  16:16big pain point for us is how we manage
  16:17our settings. We run Chef solo, right nowwe
  16:21don&#39;t use Chef&#39;s server, and our settingsare in
  16:24a bunch of S3 buckets. We have rigged tools
  16:26you know to update all our buckets, but it&#39;s
  16:28definitely not the easiest to visualize. So.
  16:31It&#39;s gonna help us a lot.
  16:34So here&#39;s some of the, some of my inspiration
  16:37while doing this. Test-driven infrastructurewith Chef. It&#39;s a
  16:42really quick read, it&#39;s like 70 pages. Ifyou&#39;re
  16:44interested in, you know, testing, your deploymentprocess, check
  16:48that out. It&#39;s kind of hand wave-y, but, there
  16:52is the code, there is the Chef, Cucumber Chef.
  16:55That the guy who wrote the book wrote, so
  16:56you can check that out too.
  16:58DevOps Weekly is a great, great newsletter.I pretty
  17:3much read every week. They bring up some really
  17:5cool tools and things people are working on.Just
  17:8release it is a very cool book in the
  17:12pragmatic programmer series or whoever releasesthat. It&#39;s, it&#39;s
  17:17Java based, but it&#39;s, it&#39;s all about, youknow,
  17:20handling failure, and how important failureis a concept
  17:23to operations.
  17:25And, of course, you know, when you&#39;re buildinga
  17:27framework and you&#39;re really trying to findthese, this
  17:30structure, patterns of enterprise architectureis a classic, and
  17:35Growing Object Oriented Software Guided ByTests, two really
  17:38great books, you know. The whole idea is to
  17:41you know start with your unit tests, thenwrite
  17:44your class, so.
  17:46It&#39;s good.
  17:47That was actually pretty quick. So does anyonehave
  17:53any questions?
  17:55I&#39;m kind of done. Thanks.
