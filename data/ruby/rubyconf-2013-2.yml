---
conference: RubyConf
year: 2013
source: https://www.youtube.com/watch?v=H81IiLUJavI
automatic: false
duration: 0
speaker: Luca Bonmassar
title: ' Mastering Elasticsearch  With Ruby'
text: |
  0:16LUCA BONMASSAR: I&#39;m Luca Bonmassar.
  0:18Even though my badge say Bonsommar.
  0:21My real name is Bonmassar. I&#39;m thirty-one.
  0:24I am Italian and I live in San Francisco.
  0:28I work at Gild, and today
  0:30I&#39;ll talk about search using Elasticsearch.
  0:33I have a lot of content to show, and
  0:36I have - here - a ticker that tell
  0:39me the time, so I&#39;ll just jump into the
  0:42talk.
  0:44So let&#39;s start by defining what we will discuss
  0:47here. Search is a very broad topic, so we
  0:50won&#39;t do, like, clarify what&#39;s our use case.What
  0:54we&#39;re discussing here is, you&#39;re buildinga product, and
  0:57you want to integrate some search experiencein your
  1:0product. So we&#39;re not talking here to builda
  1:3search engine. We&#39;re not trying to competewith Google.
  1:6So we want to implement that little box that
  1:9every website has, so that the user, the general
  1:12use case, is you have user generated content,and
  1:16you have other user that have to be able
  1:19to find and discover this content.
  1:23So, why we have to discuss this. The reason
  1:26is that search is not easy. It usually starts
  1:30when you have to build some search capabilitiesin
  1:33your product by saying, hey, our primary datastorage
  1:37has some search capabilities. We&#39;re not usingthat.
  1:40And then you start by adding some sort of
  1:43SQL queries, where you can try to search in
  1:46your database. But then the user are picky,and
  1:50they want more. They want not just be able
  1:52to search by exec name, they want also to,
  1:55for example, enter a long, long string andbe
  1:58able to find products in your, in your, in
  2:1your system.
  2:3And then you want to support Nqueries, ornot,
  2:6and your little where_name becomes a functionthat has
  2:11to pass parameter. You don&#39;t want only tosearch
  2:14on a specific field but you soon start searching
  2:17on multiple fields in your database, so youneed
  2:19to start indexing and indexing.
  2:22And in your product, what happens is thatyou
  2:24start with a very simple function and youbecome
  2:27building your own search engine in your product.
  2:30That&#39;s probably not what you want to do, because
  2:32you want to focus your development efforton the
  2:35core functionality for your product and notrebuilding yet
  2:39another search engine.
  2:41So the agenda, what I want to show here
  2:44is not a search engine. I want to speak
  2:48a pet project. And talk about search on that
  2:52project so that it&#39;s easier to discuss thevarious
  2:56step that we have to take to introduce search
  2:58in the project rather than talking about searchfor,
  3:2like, anything.
  3:3We will see some, several boilerplate thatwe have
  3:6to go through to like download the code, the,
  3:9download the elasticsearch, installing staffolding,
  3:11configuring, et cetera, et cetera.
  3:15And we will see a very simple website that
  3:18we can build, integrating search functionalities.And then see
  3:22how you can refine, improving and adding morecapabilities
  3:25for our search. And then, as homework, othercapabilities
  3:30that elasticsearch give that I don&#39;t havetime to
  3:33discuss here. But with almost no effort youcan
  3:37integrate in your product.
  3:40So the idea of why we start from a
  3:42real project and not taking, like, the searchas
  3:46a separate topic is because it&#39;s - I can
  3:51use this.
  3:52It&#39;s, it&#39;s easier to understand each use caseand
  3:57understand why there are some decisions takenhere and
  4:0there if we talk about something concreterather than
  4:4any possible search. And we&#39;ll see, for example,a
  4:6few features that are not, like, it&#39;s, they&#39;renot
  4:11easy to understand why there is this featurethere,
  4:13but in the project it makes lot of sense.
  4:16Because, oh, yeah, you could do this.
  4:18So our project start from RubyGems. Everyonehas seen,
  4:23is familiar with RubyGems. And RubyGems hasthe functionality
  4:27to search gems in the database they have,and
  4:31they have implemented the, the search in thesame
  4:33way I describe before.
  4:34So if you look at the RubyGems, the source
  4:36code in GitHub, what they are doing here is
  4:39a SQL query, name, like, what you&#39;re inputting.And
  4:44they can detect the, if the result from the,
  4:47the result is an exec match or something similar.
  4:52But it&#39;s a pity because they have so many
  4:53more information in their database you couldlook up
  4:56for dependencies, you could look up for, notjust
  4:59the name, but also the info, the summary,the
  5:1build.
  5:2So what we want to do is extending their
  5:5search capabilities in a way that we can do
  5:7all of this.
  5:9Clearly we don&#39;t have access to, like, theirdatabase.
  5:13So our project will start by getting the content
  5:16through a web spider. We will import the data
  5:21into a Mongo database - I&#39;ll clarify why the
  5:24decision of going for MongoDB for the sampleproject.
  5:29We will see Elastic Search in action and then
  5:31we&#39;ll build a very simple Rails applicationthat expose
  5:35the, the function, right, of search that wewant
  5:38to for the Ruby gems project.
  5:41So let&#39;s start from the crawler. The codeis
  5:44available there. I&#39;m not spending too muchtime here
  5:48because is not the purpose of the talk. But
  5:50the idea is RubyGems dot org slash gems provide
  5:53the least of all the gems name. They are
  5:57paginated by names. So we can go one by
  6:0one, collect all the name using ?? [00:06:03].
  6:3And then, using the gem&#39;s, the gem&#39;s own API,
  6:8we can download for each gem the JSON of
  6:10the, of that gem.
  6:12So all of these, when it runs, and in
  6:16this, so. I&#39;m not expecting you to, like,parse
  6:19all the content, but the idea is now we
  6:21have the, inside Mongo a JSON file representingall
  6:26the data available for each gem. In this case,
  6:28the Twitter gem.
  6:29This now clarify why we want to go for
  6:33Mongo. Because we don&#39;t want to map data between
  6:35what the gem&#39;s API return, whatever they returnin
  6:39term of data structure. We just dump the JSON
  6:42into Mongo and it&#39;s there. It&#39;s availablefor us
  6:44to manipulate and work on that.
  6:46So we are now to the stage that we
  6:50have the crawler running. We have the dataimported
  6:55into the system and it&#39;s also available atdump
  6:57of the data in case you want to play
  6:58with that.
  6:59And, let&#39;s start building our very simpleinterface. So
  7:3this is the starting point of our project.So
  7:7here there is nothing else than just a scaffold
  7:10Rails application showing all the gems thatare available,
  7:13which support pagination, and you can openany of
  7:17these. And here is basically reporting allthe data
  7:20that we have here.
  7:23So this is the starting point, like, thisis
  7:24my generic product, where I want to implementhere
  7:29our little search. And the, let&#39;s see howwe
  7:33do that. So the first step is to introduce
  7:37Elastic Search. So we&#39;re not gonna implementall the
  7:41logic of a search engine, but we just use
  7:43something that does that for us.
  7:45This is Elastic Search, that is cool, bonsaicool.
  7:49What is Elastic Search? Here is a long list
  7:53of answers, but let&#39;s say that is an OpenSource
  7:56search engine. They also provide analyticscapabilities, so you
  8:0can also use the same engine to get the
  8:4sort of map reviews on your data.
  8:7It&#39;s distributed, meaning that the, it&#39;s easyto scale
  8:11somehow, because the data is not monolithic.You can
  8:15split it into multiple shards.
  8:17You can have multiple note that you can distribute
  8:21your data on, and each shard can be replicated
  8:24so it&#39;s also very good for, like, the resilience
  8:27of your application.
  8:29It supports almost near time search, that,in the
  8:33short terms means that you can index new data
  8:35and almost in real time you can have this
  8:39data available for search.
  8:40It&#39;s multi tenant. That means that you canhave
  8:45multiple indexes, not just one. And you cando
  8:48cool stuff as in you can swap indexes and
  8:53the application doesn&#39;t see any change. Soyou can
  8:56deploy new indexes and you have almost nodowntime
  8:59for your application.
  9:1That&#39;s very cool when you&#39;re building yourapplication, iteration
  9:3and every time you change something in yourindex.
  9:7And unless you want to index all the data
  9:10and keeping the website off for awhile, youcan
  9:13just swap, offswap data in the database.
  9:18And the last thing is build on top of
  9:20Apache Lucene. There are also other projectthat use
  9:23the same technology. But Apache Lucene isa Java
  9:27library for manipulating text that is verypowerful.
  9:30All this is nice, but as a developer what
  9:32is really interesting is that we have thismagic
  9:35box that is able to do search and expose
  9:38its capabilities using a rest API. And thelanguage
  9:41to communicate with this magic box is JSON.
  9:44So we can send JSON documents in and we
  9:47can, even with the core command, we can query
  9:51the server.
  9:53So here is a list now of things that
  9:55we have to do to have the entire Elastic
  9:58Search ready for us to play with our product.
  10:2We have clearly to download the Elastic Searchcode,
  10:6set it up. Define some settings. We will see
  10:8some default and something that you have tochange.
  10:13Optionally we have to define update and mappingin
  10:16Elastic Search world, data mapping is theequivalent of
  10:19defining a database or table in the databaseworld.
  10:25It&#39;s optional because Elastic Search is schema-less.So you
  10:28could just ignore that and just start injectingdata
  10:32into Elastic Search. You only have to do that
  10:35if you don&#39;t want the default assumption thatElastic
  10:38Search does on it&#39;s field. So if you want,
  10:41for example, that specific field gets tokenizedor parsed
  10:45in very special ways you have to define your
  10:47own data mapping.
  10:50Then the next two steps are, first, we need
  10:52to load data into the Elastic Search cluster.So
  10:57we have to transfer data from the MongolDBto
  11:0Elastic Search cluster. And the last thingthat is
  11:5a thing that we want to do is we
  11:6want to start doing search.
  11:8Since it&#39;s a rest API and JSON document, we
  11:11can even do that by using the comma line,
  11:14and we can parse the results because theyare
  11:17JSON so they are very easy to read from
  11:20the terminal.
  11:21So let&#39;s start from the deboiler plate. Thisis
  11:25the procedure that works on any environment.So Elastic
  11:28Search is a Java beast, so you need the
  11:31Java on your, in your machine. Hopefully notany
  11:35Java but the Oracle Java. You can also run
  11:38it with the new Java but very often you
  11:42run into weird issues and the Oracle Java-
  11:44it&#39;s definitely better.
  11:47If you&#39;re running on a Mac or a Linux
  11:49you can clearly do the installation usingthe, the
  11:53package distribution like Pro or Port or APT.
  12:0And we go for the configuration. So the very
  12:3basic configuration is logging, where youhave to define
  12:7the repository of your logs. But also whereto
  12:10log and what to log at any stage, like
  12:13production, development staging.
  12:17And then you have the long list of config
  12:19setting for Elastic Search. By default, ifyou want
  12:22to run it on dev box, you don&#39;t have
  12:25to configure anything.
  12:26You can assume that all the settings are good
  12:29enough for development environment. Thereis actually one only
  12:32parameter that you have absolutely to change.That is
  12:35the name of the cluster. And the reason is
  12:38that, by default, the name of the clusteris
  12:42Elastic Search and the, we, as we say, the
  12:46Elastic Search is a distributed system.
  12:48So if you run on a network where your
  12:51developer friends are on the same networkrunning Elastic
  12:53Search, they will start discovering each otherand they
  12:57will start building their own cluster. Whatit means
  13:0is that if you&#39;re operating on your localhost,
  13:2you&#39;re actually operating on all your developerteam.
  13:7And it&#39;s a nightmare troubleshooting becauseI can wipe
  13:10out the entire database and everyone elsethat is
  13:12working on that doesn&#39;t realize what&#39;s happening.
  13:15So it&#39;s very good that at least you change
  13:17the name of your cluster.
  13:19Many of the other parameters are like onetime
  13:22only. You set it and forget it. The first
  13:25are the topology of your cluster, like, howthe
  13:30cluster is gonna look like, how many shards,or
  13:33how do you want to split the data. How
  13:36many replicas for each shards. You&#39;re goingto find
  13:39where are the things on your local system.
  13:43Elastic Search is extensible through pluginsin Java. So
  13:47you can also either write your own classesand
  13:50inject into the cluster or you can downloadany
  13:53of the plugins that are available. There aremany
  13:56for monitoring and controlling of the cluster.
  13:59The sad thing where you will spend the majority
  14:1of your time in production is the memory.Elastic
  14:5Search is a Java beast and you will need
  14:8a lot of tuning for the JVM. In particular
  14:13to not run out of memory every time you
  14:16run a facets query.
  14:18And everyone else, again, it&#39;s for, like,you set
  14:21it once and you forget it.
  14:24So we&#39;re almost there, in term of boilerplate.We
  14:28can finally start our Elastic Search cluster.And using
  14:32curl we can test if it&#39;s alive. There are
  14:35tons of APIs available to check the out of
  14:38the cluster, each node and also the consistencyof
  14:42its index, or to see if, for example, your
  14:45index is all line or not, if it&#39;s corrupted
  14:49or what is the link? Sometimes it&#39;s like synchronizing
  14:52data between nodes, so through this API youcan
  14:55do that.
  14:56And you can also shut down each node or
  14:58the entire cluster using APIs.
  15:0We&#39;re done, so we are finally ready to be
  15:5an Elastic Search expert. We can tell theward
  15:7that we are Elastic Search expert and letour
  15:10friends endorsing us. And I&#39;m sure that assoon
  15:15as you put it all your friends will start
  15:17saying yeah, it&#39;s an expert! So it&#39;s a good
  15:19thing to put it on your resume.
  15:23So let&#39;s, let&#39;s take a step back and see
  15:26what else, where we are and what is missing
  15:29for our project. So we, we have the elastic
  15:32search running. We have Mongo running. Whatelse we
  15:35have to do?
  15:36We have to start telling our project somethingabout
  15:39Elastic Search. And we have to start movingthe
  15:43data between Mongo and Elastic Search. Andlast, that&#39;s
  15:47just the step where we want to get, is
  15:49able to do queries so that we can implement
  15:52our search capabilities in our product.
  15:55So the first step is then to tell something
  15:58to our app of where is Elastic Search and
  16:2how to communicate with that, so the clientside
  16:5of the Elastic Search. We can use Tire, the
  16:8gem, that unfortunately has been renamed Re-Tirein September.
  16:13And the reason is that the Elastic Searchgroup
  16:16is now building their own official gem, sothe
  16:19author is now deprecating the gem.
  16:22However, in term of maturity and complexity,probably they
  16:26are like at least one year or more behind,
  16:29so Tire is the way to go for now.
  16:33And Tire provides not only a way to interact
  16:36- so you could do everything through HTTP,your
  16:40favorite HTTP or Ruby library like HTTP party.But
  16:44unless you want to, like, be at the, the,
  16:47meta-level, you want something that wrap holdthe complexity
  16:51of interacting with its single, like, timeoutand Tire
  16:54can do that for you.
  16:57It also support a nice active model integration,so
  16:59if you&#39;re using Rails you basically can forgetabout
  17:2Elastic Search. You will have a few needlesthat
  17:4you can operate on the class, and all the
  17:8complexities - it&#39;s totally hidden.
  17:11And last it provides a set of utilities and
  17:14tasks to perform operation that you will doit
  17:17by end, and like for example, important data.And
  17:21I&#39;ll show you a couple of cases.
  17:25So we need to set the, the gem out
  17:27to do that. We put it in our gem
  17:29file and we bundle install. There is a ??
  17:31[00:17:32] if you do that you&#39;ll probablyoverride the
  17:33entire gem find.
  17:36You, the configuration, it&#39;s pretty easy.It depends on,
  17:41like, if it&#39;s the Rails or traditional Ruby,but
  17:45the idea is you just set where is the,
  17:48the entrypoint of your cluster, and that&#39;sthe only
  17:51thing that you have to do.
  17:52A second configuration, if you want to log,that&#39;s
  17:56very, very interesting for debugging whilstTire is doing.
  18:0If you set it up, you can have a
  18:3log file from the client side. And the format
  18:6of this log, it&#39;s in Curl, so you can
  18:9cut and paste any of this comment in your
  18:12terminal, and you can physically replace everysingle step
  18:16of what Tire is doing, and you can also
  18:18then inspect each single result coming fromElastic Search.
  18:23So now we can start talking about code.
  18:27So, the Ruby gem is the wrapper for Mongo,
  18:31so a Ruby gem class in our little project,
  18:34it&#39;s a single Mongo document. What we do is
  18:38we extend that with the Tire DSL, so at
  18:42line 5 and 6 we can add Tire.
  18:46And everything else here is optional. I liketo,
  18:49to, like oversell, but everything that ishere is
  18:52optional. So we define our own mapping, thatis
  18:56the format of the record in Elastic Search.
  18:59So here we basically define a few fields,like
  19:1ID, name, original name, info licenses andso on.
  19:6You don&#39;t need to do that, because, by default,
  19:8the first time that Elastic Search see anyof
  19:10this field, will pretend that all this fieldsare
  19:13there.
  19:15It&#39;s here, just as a sort of live documentation,
  19:19so that if tomorrow you have to put the
  19:21ans again on the core at least you know
  19:23which are the fields that are supposed tobe
  19:25in Elastic Search.
  19:26And you have to do this in case some
  19:28of the field you have to override. Any of
  19:31the properties, like telling that for example,for a
  19:34couple of fields, like, ID and original name,Elastic
  19:37Search, please store it but don&#39;t do any logic
  19:39on top of that, we want to keep it
  19:41the field as it is.
  19:44And these define the structure of the record.The
  19:47second thing that you should do is overridea
  19:51metric called to_index JSON. That&#39;s part ofthe Tire
  19:55DSL. The idea is that you have to convert
  19:59your record, that in our case is JSON because
  20:1this is Mongo, into some other JSON for Elastic
  20:4Search.
  20:6You can also ignore the entire metric hereif
  20:9you want to just have a one-to-one maaping,so
  20:12whatever is in Mongo is going to be in
  20:14Elastic Search.
  20:15However, if you don&#39;t want to overkill ElasticSearch
  20:18with every sort of parameter that is in Mongo,
  20:21you want to find the structure of your own
  20:24record. So here we just define an hash for
  20:27these records and we convert it to JSON.
  20:31So if we recap what we have done here,
  20:34we can fire our Rails console and take the
  20:37first Ruby gem record. We can call the two
  20:41index JSON on that record, and that is like
  20:45the representation in JSON for your recordin Elastic
  20:47Search.
  20:49If on that record we call update_index, whatTire
  20:53is gonna do is to call your to_index JSON,
  20:56so it take the record, it generates JSON,and
  21:0then execute a push on Elastic Search.
  21:3So this is, like, the log that we can
  21:6enable on the client&#39;s side. And the, youcan
  21:9see what is happening. It&#39;s posting on theRuby
  21:13gems index for the Ruby gem type, which a
  21:17specific ID, and then the payload of the JSON
  21:21that it&#39;s loading into Elastic Search.
  21:24And Elastic Search is returning us 200, sothe
  21:26rest- So the operation succeeded. So now weknow
  21:30how to index at least one record.
  21:32We have to replicate these for all the data
  21:35that we have available. The naive way wouldbe,
  21:38let&#39;s iterate through every record that wehave in
  21:40the database, let&#39;s call update_index andwe are done.
  21:44It works. Particularly in development mode.
  21:48The way it works is to execute one single
  21:50post for each single record. You won&#39;t noticeany
  21:54performance issue is running if you&#39;re runningeverything in
  21:57local host.
  21:58Clearly if you are running with, like ElasticSearch,
  22:1it&#39;s in one box and you&#39;re on another box,
  22:5the data transfer - it&#39;s huge, cause you have
  22:7a lot of round-trip time. What you can do
  22:10is you can use a bulk API from Elastic
  22:13Search, and upload a thousand records at atime.
  22:17And here we have a bundle stack, right, provided
  22:20by Tire that does everything for you. So you
  22:22can just fire that comment and it&#39;s showingyou
  22:26the upload of all your record into ElasticSearch.
  22:32And we&#39;re finally done with all the infrastructure,setting
  22:36and we can now focus on the search.
  22:38As usual, I like the put more things that
  22:40aren&#39;t needed just for showing you, like,the capabilities
  22:45of the gem, but everything besides line 7,8,
  22:489 it&#39;s optional.
  22:50So here I&#39;m not using, for example, any digression
  22:52with ActiveModel. I&#39;m going to Tire and askingfor
  22:55a search. I could have done Ruby gem dot
  22:58search and I wouldn&#39;t have to pass the name
  23:1of the index.
  23:3In the Tire search we designate/define howour search
  23:8is gonna look like.
  23:10We ask to not the load false is an
  23:13option, so by default what Tire does is to
  23:16match the result coming from Elastic Searchto your
  23:19original record in your primary storage. Butthat means
  23:22that if you get twenty-five results back,for each
  23:25one is gonna go on the database and load
  23:27the original record to give you the result.
  23:30If you don&#39;t need that data, because for example
  23:32you have enough data in Elastic Search recordto
  23:35present it to the view, you don&#39;t want to
  23:38do that, because it&#39;s much faster just parsingthe
  23:40results coming back from Elastic Search.
  23:42So in this case we just tell, please don&#39;t
  23:44load data coming from Mongo.
  23:47And here is the query part. In the query
  23:49part, we get a search terms. The search terms
  23:54is, it&#39;s a string. It&#39;s whatever the useris
  23:57gonna type in for our search. And we ask
  23:59Elastic Search to search into name, info,owners, and
  24:3authors.
  24:4We als- and that&#39;s everything that we haveto
  24:7do.
  24:7Then we also ask a few other things to
  24:10Elastic Search. We ask not just, don&#39;t justgive
  24:13me back results, but also tell me for each
  24:16results where did you find the match, becausewe
  24:18don&#39;t want to confuse the user. Because nowwe
  24:20are searching also for example owners andauthors.
  24:23And maybe you&#39;re searching Twitter and youget a
  24:26gem that&#39;s called something else but the author&#39;swas
  24:31called Twitter and you don&#39;t get why you get
  24:33this result back.
  24:36We ask a specific sorting. By default, ElasticSearch
  24:40provides a score for each record of how, how
  24:45that record is significant for the search.It&#39;s a
  24:49sort of, not page rank, but the search rank
  24:53on each document. And it&#39;s based on multipledifferent
  24:56factor, for example, how many times the occurencyof
  24:59that word appear, the frequency, the positionand so
  25:3on.
  25:4Here we just override and, by saying don&#39;tbother
  25:7sorting by that, sort by the original name.And
  25:10the last thing is to implement pagination.
  25:13So the two API here are from and size,
  25:16so we define what&#39;s the page size and where
  25:19are you in the stream so that you can
  25:21jump to page two, three, four, five.
  25:24That&#39;s all we have to do to implement the
  25:26search. So what we can do next, it&#39;s playing
  25:28with the search from comma line. We can again
  25:32fire a Rails consol, and on the Ruby gem
  25:35we can call simple search, and this time search
  25:37for Twitter and Bootstrap but not Rails.
  25:40And we can print the first twenty-five resultsback.
  25:44So we are done in term of logic. We
  25:47can go now to the UI and implement our
  25:51little input box that just generate a getrequest.
  25:56Whatever the user types in we pass to the
  25:58simple search metric. And here is also thehighlighting
  26:2running, so we also show that if you&#39;re searching
  26:5Twitter and Bootstrap not Rails. This is foreach
  26:9record where it&#39;s coming from, in full name,authors.
  26:13And where in the string that matched.
  26:17I want just to show you how the highlighting
  26:18works, and then I&#39;ll jump on the, on the
  26:23running product. So if we execute again asimple
  26:26search for Twitter and Bootstrap not Rails,and we
  26:30get the term, the results, that results isthe
  26:32- first of all, it&#39;s not a real Ruby
  26:35gem class. It&#39;s an item wrapping a Ruby gem.
  26:40And implements other metric decorating theRuby gem class,
  26:43for example, the highlights, print us backthe key,
  26:49as a key, where you define that result, and
  26:52as a sort of HTML with emphasis, where, so
  26:55you can add easily CSS to, to highlight and
  26:59show it in your, in your UI.
  27:1You can also change the way it&#39;s stacked.Instead
  27:4of EM, you can use anything that you want.
  27:8So if we go here, this is where we
  27:12are now.
  27:13So, we have implemented the very simple search.But
  27:16there is one problem. So if you, in every
  27:20simple search, if you search, for example,by author,
  27:23since we search everywhere, at least in thosefour
  27:27fields, we can get an expect the results.
  27:30OK, so I&#39;m searching for author and I also
  27:33matched authors. That&#39;s clear because that&#39;swhat we have
  27:35built and what we were looking for. But the,
  27:39while this can work, you want your user to
  27:43be able to go into an advanced mode, where
  27:46he can specify, I want to search here and
  27:48there. So this time we implement that thisfeature
  27:52going the other way around. We start fromthe
  27:54interface and we go back to the code.
  27:56So this is more or less what a user
  27:58would see.
  27:59So we continue to show here the results, but
  28:1on top instead of just giving an input box,
  28:4we give a list of input box, so that
  28:7the user has more control on the search.
  28:10And also here we could give more control to
  28:12the user, like, on what do you want to
  28:15sort the results - do you want to sort
  28:17by name, by something else? We could alsoask
  28:21the user to show, to request how many results
  28:26per page do you want, for example.
  28:29When implementing these, one of the thingsthat you
  28:31have to wonder is, what&#39;s the logic for all
  28:34the fields? So if I&#39;m searching somethingin name
  28:37and info, what should we search? By defaultwe
  28:42could be a an &#39;or&#39; or can be an
  28:44&#39;and&#39;. So do you want the search, if I
  28:46put multiple fields to restrict your searchor to
  28:49grow, like expand your search?
  28:52So in our case, we decide that if you
  28:55search for name and author, so you put this
  28:58in name and in authors, we will search by
  29:0&#39;and&#39;.
  29:2So we go back here, and this is the
  29:5interface that we have built. And the, let&#39;slook
  29:9at the code. SO it&#39;s not very different, so
  29:12everything looks the same, and like, justcut and
  29:15paste the code to the advanced search.
  29:18The only thing here that we change is the
  29:20way we execute the query block. We tell Elastic
  29:24Search that this is the boolean search. Thesearch
  29:27condition now is not anymore a string. It&#39;san
  29:30hash of condition that the user, it&#39;s whatevercomes
  29:34from the form. So it&#39;s a list of different
  29:38keys and names.
  29:40And we just iterate for the fields that are
  29:42set by the user. We execute a search by
  29:45saying please put this as an &#39;and&#39; condition.
  29:49That&#39;s everything that you have to do. Andit
  29:51just works.
  29:53So if we go here back, we can now
  29:56search for author here.
  30:3And we just filter out everything that wasn&#39;tname,
  30:6and we can iterate by searching in somethingelse
  30:10- probably if I search here it will be
  30:12empty. Empty search. Because now those arein &#39;and&#39;,
  30:17and there&#39;s no project that&#39;s called Tor andhas
  30:20an author of Tor.
  30:22Success.
  30:23So let&#39;s iterate again and let&#39;s make thesearch
  30:27interface a little bit more, like, professional.Let&#39;s look
  30:32about facets. So facets are a way to organize
  30:36your results so that when you search for something,
  30:39in this case it&#39;s a link to a page,
  30:42and it&#39;s search for a Ruby developer. Whatwe
  30:44can do is in our results set, we can
  30:47have certain amount of categories.
  30:50For example, in this case, relationship, location,current company.
  30:54And in real time the search engine can tell
  30:56you for each category it can propose you specific
  31:0sub categories, like first connection, secondconnection.
  31:4And how many results are you gonna get if
  31:7you are clicking on that, and like narrowingdown
  31:10your search.
  31:11So facets, it&#39;s a very cool way to explore
  31:14the data, because even the, like the one hundred
  31:17thousand results that got back, I can veryquickly
  31:20filter and narrow my search back to a few
  31:24results.
  31:25So how complex is to implement this with Elastic
  31:27Search? So it&#39;s kind of easy. It&#39;s the same
  31:30code as before. The only thing that changedis
  31:32the line 34 to 38. So here we define
  31:36facets. So if the user has clicked on the
  31:38check box facets, we define four categories.
  31:42So we want to group our results by license.
  31:46We want to group our results by version. And
  31:49we want to group our results by when the
  31:51gem was built. The difference between theglobal license
  31:55and the current license is the facets by default
  31:58are related to the result of your query.
  32:1So whatever you search it classify the resultsof
  32:4your query. But you can also specify don&#39;tbother
  32:7about my query. Give me the results of the
  32:11entire data that you have in Elastic Search.
  32:15So if we try these on comma line, so
  32:19the only difference, it&#39;s face, it&#39;s truewhen we
  32:23enable that option. The results already getdecorated by
  32:27a meter called facets. And if we inspect what&#39;s
  32:30inside the facets we get back from ElasticSearch
  32:33a key value where keys are what we have
  32:36to find in our facets. So global licenses,current
  32:40licenses, current version, and the date.
  32:44And we get some statistic of how many documents
  32:47have that property, how many they were found,how
  32:50many they don&#39;t have anything like that. Butin
  32:54particular within terms or entries you getkey values
  32:58of how many for that specific category match.So
  33:2how you can plug in these into your view.
  33:6Well you can on the left implement the same
  33:9thing that we saw before in LinkedIn.
  33:11So when you run a query, you get the
  33:13first one that is global. So you get a
  33:15categorization by licenses. So that&#39;s globalfor the entire
  33:19population of gems that we have available.
  33:23Based on your query you can have a breakdown
  33:25of the licenses. For example in this caseof
  33:27Twitter, and if you click on that you just
  33:30refine your search by narrowing down on thatcategory.
  33:34Three other things that you can expand afterwe
  33:39are reached this stage of the project.
  33:41The first one, it&#39;s implementing a did youmean
  33:44capability, that similar to my badge thatwas misspelled.
  33:48If you misspell something, it can tell you,hey,
  33:51you typed in Bonsmar. You probably meant Bonmassar.And
  33:57it&#39;s a simple API. When you execute a search,
  34:0you ask for suggestions, in the second case,and
  34:3it&#39;s gonna give you like frequency and probabilityof,
  34:7yeah, probably meant this other thing.
  34:9So behind it&#39;s implementing like let&#39;s definedistance to
  34:13find matches, and you can specify severalconfiguration on
  34:17what, for you, means similar, because clearlyyou can
  34:21say that anything is similar or, like, oneor
  34:24two letter should be mispelled.
  34:28Something other, one cycle that you can haveout
  34:31of the box from Elastic Search is the implement
  34:34the similar to these, that you can find, for
  34:36example in Google.
  34:37When you find the result that you really,really
  34:39like, for example, you are building a websitewhere,
  34:42you&#39;re searching for apartments, and you finallyfind an
  34:45apartment that you really like, but unfortunatelyit&#39;s not
  34:48available today. You can execute a new searchasking,
  34:52give me more results that are similar to this.
  34:55The results on an API for that. And basically
  34:58you tell, OK, I really like this document,give
  35:1me something that is similar. You can specifywhat
  35:4similar should look like. And, again, it,Elastic Search
  35:8will compute the distance from that documentto what
  35:10it has in its database and provide you other
  35:13documents that are very similar to that.
  35:17The last Bonsai- Bonsai Cool API that I want
  35:19to show is Percolate. This is one of the
  35:23API that when you read the first time, you
  35:25don&#39;t understand what you can do with that.It&#39;s
  35:27a reverse search. So usually you search fora
  35:30term and you get back a list of documents
  35:32that match that query. Percolate is the otherway
  35:35around.
  35:36You give a list of queries and then a
  35:38single document, and you can get back whichquery
  35:41would match. What you can do with that is,
  35:44for example, going back to the example ofthe,
  35:47of the product where you search apartments.You could
  35:52have a query as a user of apartments in
  35:55Miami, because this is what you are lookingfor.
  35:58What you can do is to save your search,
  36:1and every time there is a new apartment in
  36:3this product, the product can search for anyqueries
  36:7that have been searched by a user and notify
  36:10you when a new apartment is available. Becausenow
  36:13that match your query, and then you can notify
  36:16the user, hey, come back, there is an apartment
  36:18that could be interesting for you.
  36:21And closing on this, a couple of commentson
  36:26deployment option. So everything was moreor less around
  36:30development. But consideration about deployment:
  36:34Option number one is the do it yourself. So
  36:38the pro is that you have total control on
  36:41installation and you can have any topologyand you
  36:44can specify. You can also inject Java codeand
  36:48extend the cluster. The cost is that, my experience,
  36:54it&#39;s a nightmare. In particular, the earlyversion were
  36:56very, very hard to run and manage. Some of
  37:1the learning that we have found doing that,first
  37:5of all, there is something that you have to
  37:7be aware when you&#39;re moving from a clusterof
  37:9three nodes to something more than three nodes:till
  37:12three nodes, everything is fine. Unicorn andrainbow. After
  37:15three nodes you have to specify a set of
  37:19settings that, if you forget about that, youlose
  37:22all your data. So be aware of that.
  37:25And the reason is that there is an arbiter
  37:27mechanism that automatically define who ismaster, who is
  37:30slave. Till you are below three nodes, everythingis
  37:33fine. After awhile, unless you specify thoseparameter that
  37:37you can find in documentation, weird thingcan happen.
  37:40Like, you can have, everyone is a master and
  37:43then everyone will start saying, delete thedata I&#39;m
  37:46the master. No, I&#39;m the master. And- be aware
  37:49of that.
  37:50And the other consideration is about meta,the memory
  37:53profiling. There are some operation in ElasticSearch like
  37:58the facets that, where, unless you read carefullyin
  38:3documentation, they load all the data in memory.So
  38:6if you have enough data you can go out
  38:8of memory very quickly.
  38:9And you have also to tweak several times the
  38:12garbage collector to say, please, like, keepall the
  38:15memory. Reserve it to me. Or the prioritysystem
  38:18will take your Elastic Search out.
  38:20A easy way, in case you want just to
  38:23spend some money, is to go as a service.
  38:26There are a few companies doing that as a
  38:29service. The, the, this is really beautiful,because you
  38:33just need a credit card. Swipe the creditcard
  38:36and you have the cluster up and running in
  38:39a minute. Also you buy support. That&#39;s veryimportant
  38:44when you&#39;re playing around with API and youdon&#39;t
  38:47understand why your query is always puttingthe cluster
  38:50out of memory.
  38:52The consequences - it&#39;s expensive. The secondthing is
  38:55that you could be in the wrong region. For
  38:57example, in our case we run in the US
  39:0west, but all these companies and also otherthat
  39:4you can find are on the US east. You
  39:6can find something also for more space, butthat&#39;s
  39:9also tricky.
  39:10And the other two consideration is, it&#39;s expensive.And
  39:13it&#39;s expensive. Really expensive.
  39:17So this is all I got. Here is the
  39:19code, and the results of demo and the data
  39:22so that if you want you can play with
  39:23that. There is also a machine running withthat.
  39:27Please me nice with that, because it&#39;s a little
  39:30micro and everything is running that.
  39:32And that&#39;s it, so. I have ten seconds left.
  39:37So if you have any questions.
