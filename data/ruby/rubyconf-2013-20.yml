---
conference: RubyConf
year: 2013
source: https://www.youtube.com/watch?v=VyuMWYzl9gM
automatic: false
duration: 0
speaker: ''
title: ''
text: |
  0:16JIM WEIRICH: I think that means it&#39;s abouttime to start.
  0:18Are you guys enjoying Miami? Awesome!
  0:25So why are you in here and not down at thebeach?
  0:28AUDIENCE: Cause you&#39;re cool!
  0:30J.W.: Oh, yes, thank you. Yeah.
  0:32How many people recognize this picture, righthere? Yeah.
  0:36Can you name it?
  0:38Nighthawks yeah by Edward Hopper. It was paintedin
  0:421942. If you recognize it, it might be because
  0:46it&#39;s one of the standard Mac backgrounds thatyou
  0:49can select on your desktop. And I had this
  0:51on my desktop for a long time. And I
  0:53really, really enjoy this picture. This isa really
  0:56cool picture.
  0:57Just a little bit of details about it. It
  1:0was painted in 1942, I believe. It was sold
  1:3to the Chicago Art Institute for about $3,000just
  1:7a few months after it was painted. It&#39;s hanging
  1:9up in the Institute since that time.
  1:12My daughter, who is a, goes to art school,
  1:17said she took a field trip to Chicago and
  1:20actually saw the actual painting up there.So while
  1:21I was describing it to her, she immediatelyrecognized
  1:24it, said, oh yeah that&#39;s, that&#39;s the Hopperpicture.
  1:28But this is, this is fascinating to look at.
  1:30And because it was on my background, I would,
  1:32I would open my laptop up and I would
  1:34see this and I would think about, maybe the
  1:38story behind it. I mean, look at this. It&#39;s
  1:41a diner. It&#39;s in New York somewhere. It&#39;sgot
  1:44a cigar add at the top - it&#39;s hard
  1:46to see in the washed-out lighting here - for
  1:48five cent cigars. It&#39;s dark outside but theinside
  1:52of the diner is bright light and there&#39;s a
  1:55couple characters in there.
  1:56I mean look at this couple. Look at their
  2:0body language. What is their body languagetelling you
  2:3about them? They&#39;re sitting together. They&#39;resome kind of
  2:7couple. But notice how closed off they are.Their
  2:10hands are almost touching but not touching.Look at
  2:16her face - how serious she looks, the dark
  2:19eyes. Maybe she&#39;s been crying. Maybe she&#39;ssad.
  2:21I can&#39;t quite tell what she&#39;s holding in her
  2:24hand, but it looks like it might be a
  2:25wad of money of some type. Maybe a little
  2:27bit of money. Maybe this, these two peopleare
  2:30a couple that are having problems. Maybe it&#39;smoney-related
  2:34problems. That&#39;s why she&#39;s looking at themoney so
  2:36hard.
  2:37Look at the guy&#39;s face. He is not a
  2:39happy camper. Someone wrote a poem about thispicture,
  2:46and she says, and the poem says, I bet
  2:49she wrote him a letter and he is no
  2:51longer the guy that reads her letters twice.Wow.
  2:56Wow.
  2:57Night Hawks, probably so named because theHawk beak
  3:1of the nose for this guy actually. That&#39;san
  3:4interesting little tidbit. So there&#39;s somethingwrong there. You
  3:7know, a couple problems. Money problems, maybesomething about
  3:9other kinds of problems. But definitely tensionin that
  3:13couple.
  3:13Now from a distance, I looked at this guy
  3:15and I thought, oh wow, he looks like he&#39;s
  3:17really happy to have these customers lateat night
  3:19in his diner. But when I zoomed in and
  3:22looked closer, that&#39;s not a smile he has on
  3:24his face. That&#39;s a grimace.
  3:27And he&#39;s looking at that couple. So what is
  3:29going on with the couple that is making the
  3:31waiter unhappy? You know, is, did they justget
  3:36done with a fight and they&#39;re sitting theresullenly
  3:38and he&#39;s like, OK, what&#39;s gonna happen next?You
  3:41know, it&#39;s, it&#39;s, you know, there&#39;s some interactiongoing
  3:45on there as well.
  3:46And then this guy. What&#39;s he doing there?He&#39;s
  3:50sitting alone. He&#39;s all by himself. He&#39;s gota
  3:54newspaper under his left elbow there, I believethat&#39;s
  3:57a newspaper. You can see it just a little
  3:58bit in the photo. It looks like he&#39;s holding
  4:0a glass of water. He&#39;s got a cup of
  4:1coffee right by him.
  4:2I don&#39;t actually see any food in front of
  4:4him but it looks like he&#39;s drinking something.And
  4:6he&#39;s sitting there all alone kind of in the
  4:8shadows, his hat&#39;s kind of down over his eyes
  4:10so you can&#39;t see what&#39;s going on. Is he
  4:12watching the other couple? Is he tailing them?Is
  4:15this a gangster type thing, where maybe they&#39;reinvolved
  4:19in some kind of gangster thing and that&#39;sthe
  4:20money problem and he&#39;s an enforcer and he&#39;sfo
  4:22- I don&#39;t know.
  4:23I mean the possibilities of this are, arewild.
  4:26And notice he&#39;s got- his pocket, his coatpocket
  4:28right down there, is, is open. He&#39;s got something
  4:32in it. Is that his, is that his gun
  4:35that he&#39;s got in his coat pocket? I don&#39;t
  4:37know. I don&#39;t - there&#39;s all kinds of possibilities
  4:39with this picture.
  4:39That&#39;s why I love this picture. I don&#39;t know
  4:42what it&#39;s about exactly, but the possibilitiesof the
  4:45stories behind this is really interesting.Now this painting
  4:50has been referenced in, in literature. There&#39;sbeen stories
  4:55about it. Speigal did a - published five short
  4:58stories based upon what author&#39;s thought mightbe going
  5:2on in this picture. So five different stories.At
  5:4least one of which ended in a massacre.
  5:7It&#39;s used in movies, I think, Pennies, Penniesfrom
  5:13Heaven reproduced this scene when, oh theguy&#39;s name
  5:20escapes me. Who did, who did Blade Runner?
  5:22AUDIENCE: (indecipherable guesses)
  5:24J.W.: No, the director.
  5:27AUDIENCE: Ridley Scott.
  5:28J.W.: Ridley Scott. Ridley Scott. Thank you.
  5:29When Ridley Scott did Blade Runner, he wouldtake
  5:32a reproduction of this film and shove it under
  5:34the noses of his production team and saying,this
  5:37is the feel that I want for my movie.
  5:40This kind of dark noir feel. And that&#39;s kind
  5:44of what pushed Blade Runner, the feel of Blade
  5:47Runner was inspired, very much, by the feelof
  5:50this picture as well.
  5:52Art says a lot. Pictures speak a lot. Now
  5:55they don&#39;t say exactly what&#39;s going on butthey
  5:58open up so many other questions. And I find
  6:1it fascinating to look at pictures.
  6:3So I&#39;m Jim Weirich. I am Chief Scientist for
  6:5Neo and I&#39;m here to talk to you about
  6:8the big picture. People have been asking methis
  6:11week, Jim, what are you gonna talk about at
  6:13RubyConf? What&#39;s your talk about? And I say,I&#39;m
  6:15going to talk about UML at a Ruby conference.
  6:20Yeah. Yeah. I get two reactions from that.Oops.
  6:32Yeah, like, huh, what&#39;s UML? I do not know
  6:35of this UML of which you speak. The other
  6:37reaction is - this is probably the Java developer
  6:43who has been immersed in UML for so long,
  6:46he is sick and tired of it and never
  6:48wants to see it again.
  6:49Truthfully, as I work with other Rubyists,I discover
  6:52that they have not used diagramming to anygreat
  6:56degree, and they&#39;re not aware of what UMLcan
  7:0do for you. So I&#39;m here to give you
  7:1some very basics in UML.
  7:5What I&#39;m gonna do is I&#39;m gonna give you
  7:6a vocabulary. A vocabulary in pictures thatyou can
  7:10use to build diagrams. And then I&#39;m goingto
  7:12talk about three or maybe four of my own
  7:15libraries and the diagrams that I drew ofthose
  7:18libraries, and then what I learned from thosediagrams
  7:22that I did not see by just looking at
  7:25the code.
  7:26So it&#39;s kind of my plan for this talk.
  7:28That&#39;s a road map. That&#39;s where we&#39;re gonnago.
  7:30So let&#39;s start talk, and just mention UMLjust
  7:33a little bit. There are basically three wayspeople
  7:36use UML.
  7:37One is the sketch language, to capture quickideas
  7:41and to get them down on paper so they
  7:43can communicate with each other. UML as sketchomits
  7:47details. UML as a sketch will lie about the
  7:52software, because the lie is better than whatthe
  7:54reality is there. You want to convey an idea,
  7:57you know, the idea&#39;s what&#39;s important, notnecessarily the
  8:0details. So UML as sketch.
  8:3You can use it in both ways. You can
  8:4sketch up an idea before you implement it,just
  8:8to kind of get an idea of the roadmap
  8:10you want to go to. You can take an
  8:11existing piece of code and draw the diagramsafterwards
  8:15to kind of get a better understanding of what
  8:17the software&#39;s doing. That&#39;s what I&#39;ve doneon the
  8:20examples that follow.
  8:22UML as a blueprint is probably what most,gives
  8:25most Java developers the eh feeling. It&#39;swhen you
  8:29use UML down to such a detailed degree that
  8:32a designer- architect can take the UML diagramand
  8:36hand it off to a coder and the coder
  8:38just implements it.
  8:40I don&#39;t believe that works very well at all,
  8:42and I&#39;m not a fan of UML as a
  8:45blueprint. Even worse than UML as a blueprintis
  8:48UML as a programming language. I used to work
  8:52for a company called CompuWare. We had a product
  8:55called OptimalJ, and the salesman for CompuWare,they said,
  8:59Jim, you gotta push OptimalJ for us, you know.
  9:1It&#39;s so great. You just draw the pictures,and
  9:4then you push a button and you get an
  9:7application out of it.
  9:9Yeah. That&#39;s exactly what I did. I said, uh-huh,
  9:12yeah. I laughed. But Jim it really works.It&#39;s
  9:14got to work. We use it. Patterns. And I
  9:17said, you don&#39;t, guys, really don&#39;t know whatpatterns
  9:20are, do you?
  9:20No, but we know they&#39;re good.
  9:25So I was never a big believer in OptimalJ.
  9:28It turns out that when you dig deeper, for
  9:31every diagram you draw, you have to accompanyit
  9:34with something called the expression language,to kind of
  9:37tie it down and kind of map it into
  9:38a programming language. I, and I told my sales&#39;
  9:41guys, this kind of looks like programmingright here.
  9:43He says, oh no, no, it&#39;s not. It&#39;s not.
  9:45Don&#39;t worry. It&#39;s nothing like programming.OK.
  9:48So UML as a programming language, no. I&#39;mnot
  9:51a big believer in that. But UML as sketch,
  9:53I am still a big fan of.
  9:56So let&#39;s go ahead and start. Let&#39;s start with
  9:57the first example. And this is talking aboutdependencies
  10:0in my software. I think this is one of
  10:2the strongest features of UML is to get a
  10:4broad overview of what your code depends on.
  10:10Before we do that, I got to build up
  10:11the vocabulary of the diagram so you knowwhat
  10:14I&#39;m talk about.
  10:15First of call, if you have a class in
  10:19Ruby, such as a Car class, you can represent
  10:22it as a diagram. It&#39;s just a simple box
  10:24with the name of the class right in here.
  10:26This represents this bit of code right here.
  10:29If you wish to get more detailed and you
  10:30wish to include the methods in it, you can
  10:33add a second box. Divide your box in too.
  10:35The name goes on the top and the methods
  10:38go down here into this second box. So you
  10:40talk about particular methods on that particularclass.
  10:44And like I said, UML, a sketch means that
  10:47you include the methods that you wish to talk
  10:49about right now. You don&#39;t include every singlemethod.
  10:52You just include what&#39;s important to the ideathat
  10:55you wish to convey in that particular diagram.
  10:57If you want to get even more detailed, and
  11:1I rarely do this, is that if there are
  11:3internal attributes, you can list them ina third
  11:6box that goes between the name and above,below
  11:9the name and above the actual methods.
  11:12I, like I said, I rarely go to the
  11:15attribute level.
  11:17If one class uses another class, and you can
  11:20always tell it uses it because it will reference
  11:21the class by name, here, if so, then you
  11:25could create a dependency between this classand that
  11:29class. The direction of the array goes inthe
  11:32direction of the dependency, and this is always,always,
  11:35always true in UML. Whenever you draw an arrow,
  11:38it means it&#39;s a dependency, and it goes in
  11:40the direction of the thing that&#39;s doing thedepending
  11:43towards the thing that it is being dependedon.
  11:46This means that if I use an Engine object,
  11:49I can use it independently. But if ever I
  11:51used a car object, I also need to drag
  11:54in an engine object along with it. And we
  11:57can see that because, man, we&#39;re referencingEngine right
  11:59here in the code base. That&#39;s a dependency,and
  12:2UML is great for capturing these dependencies.
  12:5Here&#39;s a dependency for cars also using wheel,and
  12:9you can say on your dependency line, you can
  12:11say one car has many wheels. In this case,
  12:16four wheels. You could put a four here for
  12:18the star, or you could just say star, it
  12:20says x, one to many. So it&#39;s kind of
  12:22a one to many relationship right there. Again.Dependency
  12:25goes from Car to Wheel.
  12:29If you inherit, the inheritance relationshipis also an
  12:32arrow. This arrow is an open triangle pointingfrom
  12:36the subclass to the superclass. So, again,I can
  12:38use car by itself, but if I want to
  12:40use a SportsCar class, I get Car automaticallybecause
  12:43it&#39;s dragged in by that dependency.
  12:48Ruby has modules. And this is how I designate
  12:53modules in a UML diagram when I&#39;m using, talking
  12:56about Ruby, is essentially the same as a class,
  13:0but I put this, it&#39;s called a stereotype.I
  13:4say it&#39;s a module in this, I use angle
  13:8brackets, but what they really should be areFrench
  13:11quotes, which I cannot pronounce the realname for.
  13:15But that&#39;s a stereotype right there, and thatsays
  13:17it&#39;s, it&#39;s kind of like a class but it
  13:19has these special properties and it&#39;s a module.And
  13:22if you&#39;re doing Ruby programming, you knowwhat a
  13:23module is. And that&#39;s all it&#39;s telling you,that
  13:25Driveable is a module.
  13:27I use the same arrow to indicate include as
  13:31inheritance here, because essentially it&#39;sthe same relationship. The
  13:35difference between inheritance and includinga module in Ruby
  13:39is very subtle and I don&#39;t really call out
  13:42the difference in a UML diagram because ofthat.
  13:47OK. So there&#39;s one more thing I want to
  13:50show you and this is really important. Here,Car
  13:56is being passed an Engine object. And so there
  14:2is no longer a direct reference to the Engine
  14:4class inside my Car class anymore. So Carno
  14:9longer depends upon the Engine class, butit does
  14:13depend upon some kind of object that behaveslike
  14:17an Engine does.
  14:18In other words it does, it&#39;s duck-typed toan
  14:21Engine. I capture this in U- in Java. If
  14:25you&#39;re doing this in Java, this would be an
  14:27interface. And you have to actually writecode that
  14:29had the start and stop method on it and
  14:32say this is an interface and that the Engine
  14:34implements the interface. In Ruby, the stufffor this
  14:38thing right here doesn&#39;t exist. There is nosource
  14:41code for this box right here. But it&#39;s an
  14:43important concept, which you need to captureand be
  14:47able to talk about.
  14:49Car does not depend upon Engine, but it does
  14:51depend upon an object that obeys this protocol,this
  14:55start and stop method on it.
  14:59Engine implements that protocol. So it gets,it&#39;s kind
  15:2of like the inheritance line, but dotted insteadof
  15:5solid. And so I&#39;m saying Engine implementsthis car
  15:8independence- uses it, Car does not dependupon Engine.
  15:11That means if I want to test a Car,
  15:13I can just drop anything in that acts sufficiently
  15:16like a Car- or, sufficiently like an Enginefor
  15:19my testing, and I can test Car without having
  15:22an Engine available at all.
  15:24And this is an important concept in drawingthese
  15:26dependency diagrams is to recognize that,hey, that dependency
  15:30no longer goes all the way to Engine, but
  15:32is just using a protocol at that point.
  15:34All right. So now we got some basic vocabulary
  15:37to talk about dependencies in our programs.
  15:43So this is a pretty standard Rails applicationright
  15:46here. This is actually an implementation ofthe pay
  15:49employee problem that is common in literature.You probably
  15:55run into it. You have three kinds of employees.
  15:58Hourly, salaried, and commissioned.
  16:0Hourly employees are paid according to thetime cards
  16:2they turn in. Salaried employees are paida yearly
  16:5salary, paid once a month. So they get one
  16:8twelfth of their annual salary once a month.Commissioned
  16:11employees get a salary plus a commission basedupon
  16:14the sales receipts that they turn in. So there&#39;s
  16:16three different ways of calculating theirpay check.
  16:20Here, what&#39;s important to notice, is thatin this
  16:22Rails version of this solution, we have anemployee
  16:27controller. It inherits from application controller,which inherits from
  16:31action, action controller base.
  16:34The red classes are Rails classes. They arepart
  16:39of Rails. The pink classes are our applicationclasses
  16:42that depend upon Rails. So, if I want to
  16:45test my employee controller, I&#39;ve gotta bringin Rails
  16:48to do it. If I want to test my
  16:50employee object, I gotta bring in ActiveRecordto do
  16:53that testing.
  16:54So they are dependent upon the framework.However, the
  16:58way I chose to implement the salary calculationwas
  17:1as a set of strategies that the employee picks
  17:5a strategy based upon what type of employeehe
  17:8is and then just calls the strategy. Hourlypaycheck,
  17:11salaried paycheck, commissioned paycheck,with all implement the protocol
  17:15that includes calculating pay amount and getspassed in
  17:18an employee object.
  17:20There is nothing in these guys that directlyreference
  17:23the employee class. They just depend uponsomething that
  17:26acts like an employee. That means these guyscan
  17:30be tested very simply by - like, if I
  17:32want to test Salaried Paycheck, I just needto
  17:35pass in an object that has an annual salary
  17:38field on it and I can test that without
  17:41loading Rails at all. That&#39;s why they aregreen.
  17:43These can be tested, the green things canbe
  17:45run very quickly and very safely.
  17:47And we can tell that by examining the arrows.
  17:50Notice that in this dotted box here, all of
  17:54the arrows are pointing inwards. There isnothing pointing
  17:57outwards from this box. That means I do not
  18:1depend upon the framework and that tells meI
  18:3can test those very efficiently and very quickly.
  18:7However, if I want to test the employee object
  18:9directly, I&#39;ve got to load Rails. If I want
  18:10to test controller directly, I&#39;ve gotta loadRails again.
  18:13I&#39;m teaching a class with Bob Kauss rightnow,
  18:18on testing in Rails and refactoring in patternsand
  18:21things like this, and we use this examplein
  18:23our class.
  18:26One of the things we do is to push
  18:28this system. You see how much we can get
  18:31decoupled from the Rails framework. So wecan test
  18:36as much logic as we possibly can without invoking
  18:39Rails.
  18:40One of the techniques we use is, some of
  18:42the techniques from the hexagonal architectureconcept Matt Winn
  18:46does, and Kevin Rutheford has done.
  18:49And if you look at that, they have basically
  18:51take this approach. And this concentrateson the controller
  18:58now. They take the employee controller, andthey say
  19:2some of the logic in the controller is Rails
  19:5dependent. Things that say redirect to thisURL. Render
  19:8this template. Here is the params hash. Thoseare
  19:13our Rails things.
  19:15However, some of the logic is really businesslogic.
  19:19Even in the standard dumb Rails controller,there&#39;s still
  19:22business logic in there. How do I create an
  19:24employee object? How do I save an employeeobject?
  19:27What ha- how do I validate and how do
  19:30I, what, you know, how do I detect whether
  19:33it&#39;s saved or not? Validated or not? It&#39;sall
  19:37really kind of business logic.
  19:38So they very carefully picked that controllerapart into
  19:42two pieces. One piece remains here in thecontroller.
  19:45The other piece, they pull out and, I&#39;m calling
  19:48it a runner, cause they, they tend to give
  19:50it the method called run. And the run, into
  19:54the run they pass in a couple things.
  19:55They pass in a protocol that is essentiallythe
  19:58context object, which is the controller. Theypan, and
  20:2I have also pulled out a repository objecthere,
  20:6so all the database related stuff is donethrough
  20:9a repository. And it&#39;s, it&#39;s a little tediousbut
  20:12it&#39;s really not hard, at all. You can almost
  20:14automate that piece very easily.
  20:18So the runner now depends upon something thathas
  20:21save and find_employee type methods on it.It depends
  20:25upon some call backs the context provides.But there
  20:28is no direct reference to Rails anywhere inthe
  20:32runner anymore.
  20:33That means I can test the business logic in
  20:35here very carefully. Now I&#39;ve got a wholebunch
  20:37more logic that is totally free from Rails,and
  20:41then I can easily test.
  20:43There&#39;s one more stage I like to do, and
  20:47this - I&#39;d like to get most of the
  20:48business logic in here free from Rails aswell.
  20:51There&#39;s many ways to do this. Here&#39;s one.
  20:57Let&#39;s treat employee, the ActiveRecord employeeobject, as a
  21:1dumb data holder. I&#39;d, I&#39;m gonna let threethings
  21:5go in there. Number one, I let database fields
  21:9be in that object. I let relationships bein
  21:12that object, cause Rails is really good atdefining
  21:14relationships. Doesn&#39;t make sense to pullthose out.
  21:16Likewise, validations are in that object.You can make
  21:20an argument, you could pull validations out- yeah,
  21:22OK, you can do that too. I tend to
  21:24leave them in.
  21:25So it tends to be dumb, without any business
  21:28logic in it. Then I create a business employee
  21:33object. I usually just namespace that, putit in
  21:36a module called biz or whatever. And thenkey
  21:40proxies to the employee object and all heneeds
  21:44to do is assume that he has an object
  21:46that supports the dumb data portions of employee.
  21:50That means he knows about the employee name.He
  21:53knows about the annual salary. But that&#39;sall. There&#39;s
  21:56no business logic in here, or representedby this
  22:0protocol at all. Now my whole applicationcan use
  22:4this business employee as if it were the ActiveRecord
  22:8object. But he himself doesn&#39;t actually dependupon ActiveRecord,
  22:11he just depends upon the protocol for dumbdata.
  22:14This is pretty easy actually.
  22:17And now, with that, the whole thing here actually
  22:23my entire application is now inside the redbox.
  22:26I can test stories here at this level, cause
  22:30the, you know the, create a employee storiesis
  22:34actually implemented by this code here. Theemployee specific
  22:39business is in here, and all I have to
  22:41do, you know, so I can test all of
  22:43this very easily. I can actually run unittests
  22:46at this level.
  22:47If I want to, I can go ahead include
  22:49the ActiveRecord part of this, and do story-leveltesting
  22:52all the way to the database without goingthrough
  22:55the web interface, cause I&#39;m hitting thisguy right
  22:57here. And then I can do just a little-
  23:1the only thing outside the box is now is
  23:2just a little bit of wiring that happens in
  23:4the controller. I can easily test that ata
  23:7integration level test by hitting the webUI.
  23:9So my web UI testing is light-weight and small
  23:12and just enough to make sure the connectionsare
  23:15made. My story-level testing gets here andcan go
  23:17all the way to the database. And then my
  23:20unit tests - excuse me, my unit tests are
  23:22this level here, and they can be fast and
  23:24very fine-grained and have a lot of them to
  23:26really exercise the logic.
  23:28I think that&#39;s a good division of labor between
  23:31your tests. And I really like the architecturethat
  23:34I&#39;ve been experimenting here with this idea.But notice
  23:36how the diagram tells you all that information.I
  23:39can look at this diagram. I can tell, here
  23:41are the arrows, and this is the directionthey
  23:42poi- are pointing and this green stuff hasno
  23:45arrows leaving it, going after any of my ActiveRecord
  23:48stuff.
  23:49So the diagram really helps convey that informationwithout
  23:53me going through and showing you a lot of
  23:55code, code, code.
  23:57OK. Next example, let&#39;s talk about structure.
  24:2Excuse me.
  24:5This is a diagram I drew based on Rake.
  24:11I was actually rather surprised when I gotdone
  24:14with this thing, diagram. This had, has verylittle
  24:17mapping in, in how my mind thinks about Rake.
  24:20So the diagram, to me, was very interesting.
  24:23First of all, the first thing that kind came
  24:25out to me is that Rake has a lot
  24:27of large classes with lots of methods on it.
  24:31So few classes, but the classes have lotsof
  24:34meth- and you don&#39;t see all the methods here
  24:35because this is sketch. And I omitted themethods
  24:39I wasn&#39;t interested in showing.
  24:41But as I was going through the diagram, I
  24:43saw, oh, this task manager&#39;s got a bazillionmethods
  24:47on it. Application has a lot of methods on
  24:51it. Task has a bazillion and a half methods
  24:54on it. They&#39;re just not being shown here.
  24:59So that was kind of odd. I was kind
  25:0of surprised by that. The other thing I miss-
  25:3noticed, is there&#39;s lots of things in here,domain
  25:6knowledge about Rake that is not representedanywhere by
  25:8a class. This bothers me just a little bit.
  25:12Rake has a concept of rules. There is no
  25:14rules class in Rake at all.
  25:17That&#39;s kind of odd.
  25:19Rake also attacks locations where a task isdefined
  25:23so you can find it easily in your source
  25:25code. There&#39;s no domain object representinglocations in Rake.
  25:29And this is kind of bothersome to me as
  25:31well.
  25:33And this one&#39;s really odd. So what is happening?
  25:35Your task manager is the guy who containsthe
  25:38tasks. And the way Rake is designed, taskmanager
  25:41is a module that is included into your application
  25:43so your application is the thing that holdsthe
  25:46tasks. It attracts the current scope. Thereare name
  25:50spaces in Rake. And that&#39;s represented bythe scope.
  25:53But I really like this part about, this has
  25:55worked really well here, but it&#39;s a littlebit
  25:58odd in that, as you read a Rake file,
  26:1the scope is constantly changing, and I&#39;mdefining a
  26:3task in this name space, I pop out of
  26:5the name space, and as you&#39;re doing it, the
  26:6current scope keeps changing.
  26:8And as you define a task, he gets, he
  26:10grabs whatever current scope the task managerhas at
  26:13that point. And that works fairly well, butwhat
  26:15I end up with is a flat list of
  26:18all the tasks in the system, and there&#39;s nothing
  26:21that captures the structure of the name spacesat
  26:24all. And I was kind of surprised by that,
  26:26when I went back and actually looked at how
  26:28I implemented it, it seemed a little bit weird.
  26:31The other weird thing is that file_task essentiallyignores
  26:35scope, because they&#39;re defining files andfiles have no
  26:38idea of what the name space are, so they,
  26:40they kind of ignore scope when they&#39;re do-being
  26:43defined. So why does file_task inherit froma task
  26:46which has a scope?
  26:49That struck me in, in reading this diagramas
  26:51something a little bit odd. So maybe I should
  26:55rewrite Rake. Version 20, yeah.
  27:4And here&#39;s an idea, here&#39;s one way I might
  27:5approach it. So this is now UML as a
  27:8sketch, kind of exploring an idea that wecould
  27:12go in. So here&#39;s your application, but ratherthan
  27:15inheriting from task manager, make task managera object
  27:20in and of itself. And task manager is now
  27:23responsible for managing all the tasks inthat scope,
  27:27but no other scope.
  27:29The scope object kind of goes away, and rather
  27:32than a linked list, the task manager now becomes
  27:34a tree of name spaces. Now I can represent
  27:38the name space structure of your Rake fileexplicitly
  27:40in my code base. Seems to me that would
  27:42be a good thing.
  27:46Tasks still have - and this is mis-labeled,this
  27:47should say scope right here. That&#39;s anotherproblem with
  27:51UML. It doesn&#39;t always accurately reflectyour code base.
  27:56I would, this would actually be scope nottask.
  27:59But there would have one task would pointto
  28:1a particular scope. Task manager would havemany tasks.
  28:6And then task and rule and file_task wouldall
  28:9implement some kind of task protocol that&#39;sthere.
  28:13And I think that might be an interesting way
  28:14to go. It might be worth exploring through.The
  28:16problem, of course, is Rake is a well-definedapplication
  28:19and if I change the internal structure toomuch
  28:21I might break somebody&#39;s code, so. Gotta treatthis
  28:24with care.
  28:25But here&#39;s an idea of a direction to go.
  28:29So, so how am I representing scopes now in
  28:33here? So I gotta give you some new vocabulary.
  28:36So now, let&#39;s talk about objects rather thanclasses,
  28:39we&#39;ll talk about objects. So here is a Car
  28:42object, my car, and we can represent thatin
  28:44UML as my_car colon Car, and we underlinethe
  28:48whole thing. And it looks a lot like a
  28:49class box except it&#39;s got an underline thingin
  28:52it that means it&#39;s an object, not a class.
  28:56If we don&#39;t care what the thing is called,
  28:57we can leave off the name. If we don&#39;t
  28:59care what class it is and we just want
  29:1to talk about this object with this name,we
  29:3can leave off the colon and the class name.
  29:6So either way works. Any three of these are
  29:7valid.
  29:9So here is a car with an engine and
  29:12four wheels. So this object diagram, so, soa
  29:18class captures kind of a static nature ofthe
  29:22class relationship. An object diagram capturesa snapshot in
  29:27time of an object and what it has. At
  29:30this point in time, this car has an engine
  29:33and a wheel.
  29:35If I leave it out on the street and
  29:36somewhere steels the hu- the wheels off ofit
  29:40and all of the sudden it&#39;s got less wheels.
  29:42So that would be a different snapshot in time.
  29:44Or someone takes out the engine and replacesthe
  29:46engine. Well that would be a different snapshot.
  29:49So an object diagram captures, this is howyour
  29:51objects look right now at this point in time.
  29:55So this is how Rake might look at a
  29:58point in time. Here we have a top-level task
  30:2manager name space and we have a test name
  30:5space here and he has a task called units,
  30:8so test colon units would be the name of
  30:11this task. DB test prepare would be the name
  30:15of this task. DB migrate would be the name
  30:18of this task.
  30:19So I&#39;m representing the scopes and the namespaces
  30:22of Rake in a data structure inside of Rake
  30:25as well. So object diagram can capture thatkind
  30:28of snapshot idea of your program. And I really
  30:31like that. OK.
  30:34Let&#39;s talk about creation of objects.
  30:42I have a goal this year to talk about
  30:44flying robots in every single talk I give.I-
  30:51Thank you. Thank you. I think I&#39;ve only missed
  30:55on talk so far, and I slipped it kind
  30:56of in in the comments so then at the
  30:58end.
  30:58So here. So let&#39;s talk about the flying robot
  31:1that we&#39;re playing with back in the office.This
  31:3is a parrot AR drone. It&#39;s a quadacopter.It
  31:6has two cameras on it. It runs Linux on
  31:9the copter itself. And it talks to your laptop
  31:12via wifi.
  31:14I have written a library called Argus thatyou
  31:18can use to control an AR drone. And here&#39;s
  31:21a simple program where we create a drone,we
  31:23tell it to start, all its subprocesses up.We
  31:26tell the drone to take off, tell it to
  31:28turn right, turn left, hover, and then land,and
  31:32then shut down.
  31:33So let&#39;s see if that program works. K. Take
  31:38off. Turn right. I think I actually turn right
  31:43for five seconds instead of two. Turn left.Hover
  31:50and then land.
  31:52OK. So cool. So that&#39;s, that&#39;s, that&#39;s allcontrolled
  31:55by Ruby.
  31:58A good way to talk about the Argus library
  32:3is to use an Argus diagram. I can show
  32:5you this diagram and I can talk about the
  32:7pieces of this architecture and how, whatthe responsibilities
  32:11for each piece is. The drone object is the
  32:14drone that the application plays with. Itis the
  32:16front facing object that you send all yourcommands
  32:20to. You don&#39;t have to worry about anythingbehind
  32:22the drone.
  32:23The controller is responsible for, for translatingthese high-level
  32:28commands like go up, go down, turn left, turn
  32:30right, into lower-level drone commands. Andthen taking those
  32:35commands and then calling the right commandson the
  32:37AT commander. AT, AT because every commandon the
  32:43drone begins with the letters AT. It&#39;s likethe
  32:45guy who wrote this protocol was really hungout
  32:48up on the haze modem protocol.
  32:50It&#39;s AT star, the name of the command, and
  32:56then strings after that, yeah. So, so thehigh-level
  32:59commands here, like turn left, get turnedinto a
  33:2progress command, a key command here, witha particular
  33:5amount of data. This class is responsiblefor generating
  33:8the stream of text messages that get sentto
  33:12the drone and then the UDP sender class is
  33:15responsible for actually sending this packetover the wire.
  33:18So it&#39;s very clear division of responsibility.I really
  33:21like this design.
  33:22On this side we have a nav naviga- nav
  33:25monitor, which monitors the navigation comingback from the
  33:28drone. So it watches for commands like saying,OK,
  33:31I am now this high. Oh, my battery is
  33:34running out, somebody do something, you know,a little
  33:36messages like that come back over the navigationdata
  33:39stream. And then the nav streamer is responsiblefor
  33:42handing timeout issues on that navigationstream.
  33:45We&#39;ll get more on the nav streamer here in
  33:48a moment.
  33:49But this is an object diagram. So I thought
  33:53it would be interesting to look at the class
  33:54diagram for this, and it looks like this.
  33:59We can still see the seven objects listedhere,
  34:2but now we&#39;re showing them at a protocol level.
  34:5Protocol&#39;s the implement. So the drone uses,assumes something
  34:9with this protocol. The controller implementsthe protocol. The
  34:15drone also then uses a AT commander protocol,which
  34:20the controller also uses.
  34:22The nav monitor uses this protocol and soon
  34:24and so forth. And so this is really nice.
  34:26This seems I can test each of these concrete
  34:28classes very easily, despite providing somethingthat responds to
  34:32the protocol, and they can all be tested independently.
  34:34It&#39;s a little weird, though, looking at thisdiagram,
  34:37because I have these objects hanging out herethat
  34:39nothing connects to. And so this diagram liesjust
  34:43a little bit. What&#39;s really going on is that
  34:46I have code that looks like this in the
  34:48drone. It says, OK, create these concreteobjects here,
  34:55unless you override it with something. SoI can
  34:56override any of the concrete implementationsvery easily. So
  34:59it&#39;s a really cheap kind of dependency injectiontechnique
  35:2that you can use in Ruby.
  35:5So that makes it easier to test, but makes
  35:7it so that if I just use it by
  35:8default, the right things get built up andused.
  35:11So let&#39;s go ahead and draw these relationshipsin
  35:14and let&#39;s mark it with a style that says
  35:17create, and I&#39;m gonna, I&#39;m gonna do theselines
  35:20in red so we can see them. So the
  35:22drone will create the monitor, will createthe controller.
  35:25It&#39;ll create the AT sender. Now everythingis attached
  35:28by lines.
  35:29Notice anything really unusual in this diagram?
  35:35The drone does almost all the creation, butalmost
  35:38all the creation, except for this guy rightdown
  35:41here. And for some reason nav monitor thoughtit
  35:43was his responsibility to create the nav streamerdown
  35:46here. I&#39;m not sure why.
  35:51And it wasn&#39;t apparent to me, looking at the
  35:54code, this did not stand out to me looking
  35:56at the code, until I kind of drew the
  35:57diagram and saw the create lines pop up here
  36:0that was different from all of the others.So
  36:3again, the diagram helped me see things thatI
  36:5did not see in the code itself.
  36:10I think, I want talk about that nav streamer
  36:16thing that handles time outs. but then todo
  36:18that we need to be able to talk about
  36:20dynamic behavior. So here is a UML diagramthat&#39;s
  36:25different than we&#39;ve seen before. This isa state
  36:26diagram and essentially says this class here,this toggle
  36:32class has two states, on and off, ands when,
  36:36OK so you start in the off state so
  36:38the black dot indicates where you start.
  36:42The arrows are transition from state to stateand
  36:44the transition happens when you hit a trigger.The
  36:47trigger here is called button push and weimplement
  36:50triggers as methods on objects. When you&#39;rein the
  36:54off state and you hit a button, then the
  36:56action you want to take is called turn on.
  36:59So the trigger happens, button, you look atyour
  37:2state you say oh we&#39;re off, then we want
  37:4to turn ourselves on then we switch the state
  37:8to being on as well. So thats the next
  37:11state there.
  37:12So you can look at this, this is a
  37:14pretty simple state implementation here, butlooking at the
  37:19diagram here gives you a lot more information.OK,
  37:26here is another one, I just wanted to show
  37:27this, this is a recognizer for an imager,you
  37:29start here on the empty state if you get
  37:31a digit, then you&#39;re good as you move to
  37:34the integer state as long as you keep getting
  37:36in digits you get that. If you get non-digit
  37:39then you say, oh yep, we&#39;re done, we got
  37:41our integer. It&#39;s just a little recognizerhere. The
  37:43dot with the circle is the stop state.
  37:46So let&#39;s talk about the nav streamer now.Nav
  37:50streamer is responsible for handling timeouts. This is
  37:54how it works: we start up, we go into
  37:56the wait state. In the wait state everything,unless
  38:1the thing we expect to get is a start
  38:3command. The start will issue a reconnectthat will
  38:6essentially go out and create a UDP socketand
  38:11will start listening on it right away. Italso
  38:16requests the nav data as well. Going to a
  38:19wait state and as soon as we receive data,
  38:22we go into a run-state. This is the expected
  38:24place to be in. If we time out during
  38:27the run state, either with a short time out,
  38:29we ignore it.
  38:31We receive data in the run state. We stay
  38:32in the run state. But if we get a
  38:33long time out, long time out is, I think
  38:37a second or so. Short time outs are like
  38:42fifty milliseconds, the longer timeouts arelike a second.
  38:44So if we get a long time out then
  38:46I need to reconnect, I need to clobber my
  38:48UDP socket object, recreate it, re-requestthe nav data
  38:53and go back to the wait until I receive
  38:55data again.
  38:56And in the wait state, if I get a
  38:58short out, short time out, I gotta keep requesting
  39:0the nav data because the UDP, it might have
  39:2missed it. I gotta resend it. So this very
  39:4succinctly tells me exactly the algorithmused by the
  39:10time out mechanism in UD... in nav streamer.So,
  39:15I like state diagrams, I think we should use
  39:16more of them.
  39:19Let&#39;s see, what are we dong on time here?
  39:23You know what? I&#39;m in trouble because I didn&#39;t
  39:27hit the start button on my timer up here.
  39:31So we&#39;ve got 10 minutes? Thank you. All right,
  39:34interactions. We&#39;ll go through this reallyquick.
  39:37Here&#39;s flex-mock, a library I wrote for mocking.It
  39:41contains a mock container. Mock containersare responsible for
  39:44managing mocks within a test. This is themock
  39:47object right here, so a mock container containmany
  39:50mock objects. The mock object records by methodnames,
  39:55a set of expectations here, and particulardetailed expectations
  40:0here.
  40:1Describing this whole thing here and how theseinteract
  40:4is very hard to do in words. It&#39;s even
  40:7harder to look at the code and figure out
  40:9what&#39;s going on, so we need a new vocabulary
  40:11to talk about these. And these are sequencediagrams.
  40:15They&#39;re essentially objects here, so it&#39;slike a object
  40:18diagram with life times on it. So here in
  40:21this class we call def drive, def drive calls
  40:24go_faster, go_faster calls accelerate.engine.def drive is- so this
  40:29is the method called def drive, this is how
  40:30long its alive. Def drive calls go_faster,so this
  40:34is go_faster right here. Inside of go_fasterwe call
  40:37accelerte.engine. accelerate.engine returnsthe result. Returns here, go_faster returns
  40:40to def drive and then def drive returns to
  40:43the bottom here. It&#39;s just a sequence of calls
  40:45and kind of timing related. So here is the
  40:51interaction in flux-mock.
  40:53This is, let&#39;s walk through this. A mock gets
  40:59a message called foo. That triggers a method,a
  41:5message missing, which goes into here. Sothis is
  41:8message missing right here. Message missingimmediately creates a
  41:12call record to record the fact that foo has
  41:15been called. So we can query it later to
  41:18see what messages have been called, and thengoes
  41:20and locates the proper expectation director.That&#39;s based upon
  41:24the name foo. So that&#39;s just a hash look
  41:26up.
  41:27I didn&#39;t record the hash look up in my
  41:28sequence director because the detail I don&#39;twant to
  41:31talk about right now. So then we call call
  41:34on the hash expectation director and givein the
  41:38arguments to foo and the call record . So
  41:43then expectation director immediately callsfind_expectation on itself, passing
  41:47in the arguments. And then it goes to each
  41:49of the expectations that it&#39;s managing andsays oh,
  41:55expectation one, do you match the argumentthat just
  41:57got passed in and expectation one says, nope,false,
  42:1return.
  42:1Director says let&#39;s go to expectation two.And do
  42:6we match the arguments for this? And thisexpectation
  42:8says yes, I expect to be called with no
  42:11arguments, and thats exactly how we&#39;re callingfoo. So
  42:13yes, I match and I return true and then
  42:16the director says, oh so you match the arguments.
  42:18Now are you eligible to be called? We ask
  42:21eligible because some expectations expectto be called once
  42:24or twice or three times and so have we
  42:28run out of times you&#39;re allowed to call this
  42:30expectation or not, are we eligible? And saysyeah,
  42:32yeah you can still call on me. So eligible
  42:34returns true. Find_expectation returns expectationtwo here. That&#39;s the
  42:41return value to here, to our call thing.
  42:44Call then sets the expectation field on thecall
  42:47record to indicate which expectation we called,and then
  42:52it calls verify_call and then it asks theexpectation
  42:56to calculate the return value for this mockedcall.
  43:1And then it returns here to call. Call returns
  43:4for Message Missing and foo returns from there.So
  43:8that&#39;s how we find the expectations in flux-mock.
  43:11That&#39;s a lot of details there, but when I
  43:13walk you through this, and kind of walk you
  43:17through it, it&#39;s a very easy way to describe
  43:19it. I like , I like and dislike sequence
  43:24diagrams. They are the most fragile diagramto write
  43:27because they break all the time. As soon as
  43:29I change anything, this diagram will be criticallywrong
  43:32in some manner. They&#39;re also a pain to draw.
  43:38There&#39;s lots of details in here and gettingeverything
  43:40to match up right, ehh, thats a pain. This
  43:42took me probably the longest diagram of anythingto
  43:44call and to draw it. I have to run
  43:46through the code myself to understand it.
  43:49However, the process of walking through thecode to
  43:52draw this diagram is worth everything. Thisis one
  43:55case where I feel the diagram, eh, I have
  43:59ambivalent feelings about it. But the processof writing
  44:2the diagram means I really gotta understandwhat&#39;s going
  44:4on down underneath the covers and that, tome,
  44:6is the big win of this kind of thing.
  44:9So UML, you, I find, I draw diagrams, not
  44:12so much for the diagram&#39;s benefit, but a lot
  44:14for the learning that happens when I drawthe
  44:18diagram. So lets summarize here, just reallyquickly. UML
  44:22is great for detecting dependencies, and that&#39;smy favorite
  44:26thing about UML all together. Yeah, lets knockdown
  44:30the sign. I guess my favorite thing aboutUML
  44:33is doing the dependency looks there, lookingat structure,
  44:38looking for anomalies in structure when Idraw the
  44:40diagram there, it&#39;s good for that. It&#39;s goodfor
  44:43denoting dynamic behavior in a way that thecode
  44:46kind of obscures sometimes. And then objectiteration is
  44:49another feature of UML that is, probably,a less-used
  44:53feature of UML that I personally use, butwell-worth
  44:56knowing about.
  44:56Some tips, if you want to start drawing diagrams,
  45:0here&#39;s some ideas. Decide what idea you wantto
  45:3communicate with this particular diagram anddraw it with
  45:7that in mind. Don&#39;t worry about capturingall the
  45:10details, capture only enough detail so thatthe diagram
  45:13makes sense to the audience that you&#39;re addressing,so
  45:16they can understand the idea that you wishto
  45:18convey.
  45:22Explore ideas, like I did with that rake re-design
  45:25thing. Maybe we could re-do it like this.Now,
  45:27that diagram is probably wrong, I probablymissed some
  45:30details somewhere, but it was worth exploring,gives me
  45:33an idea of where I might want to go
  45:34in the future. I recommended you draw thediagram.
  45:40Don&#39;t depend upon automated drawing toolsthat examine your
  45:43source code and put up diagrams. They putway
  45:45too many details in the diagram, they don&#39;tconvey
  45:48an idea, they convey exactly what the sourcecode
  45:51conveys, so you might as well just look at
  45:53the source code at that point. It&#39;s the editing
  45:55process that makes the diagram useful.
  45:58And keep the ephemeral. Don&#39;t try to generatelots
  46:4and lots of diagrams for your application,thinking, oh,
  46:6its going to help lots and lots of programmers
  46:8in the future. A few well-designed, high levelUML
  46:12diagrams, placed in the document directory:excellent. Lots of
  46:16detailed diagrams, placed in the documentdirectory: gonna get
  46:20out of date before you know it. It&#39;s just
  46:21not worth it. So, keep the ephemeral. AndI
  46:23love white boards for drawing UML.
  46:26Presentation tips. If you&#39;re going to do atalk
  46:30and you&#39;re putting UML documents up, makethe lines
  46:32two pixels. Who knew they look so much better
  46:37like that? They look like, oh they mean something.
  46:39This is, ah, this is wimpy. A good book
  46:44on UML is UML Distilled. It&#39;s this thin book,
  46:47unlike the thick books you&#39;ve been buyingon UML
  46:49that go into all the gory details. UML Distilled
  46:52talks about just the essentials of UML andcan
  46:54get you going in getting your diagrams upand
  46:56running. It&#39;s still pretty good. Some tools?White boards,
  46:59get a white board. We have an office that
  47:1has three walls of white boards. Humm, I love
  47:5it. If you want to do it programmeticlly,on
  47:9the cheap, I recommend UMLet. It is a Java
  47:15application. It&#39;s really lightweight, it&#39;sgot a really unusual
  47:18editing feature, but you can get good lookingdiagrams
  47:21up and running fairly quickly with UMLet.
  47:24All the diagrams I did for this talk were
  47:25done with OmniGraffle, which is, does reallypretty diagrams.
  47:33If pretty is important.
  47:35I think sometimes making them pretty makesyou feel
  47:37like you need to keep them around longer than
  47:40you need to. So I&#39;m not actually recommendingUML
  47:44for your day to day UML diagram. White boards
  47:46is my first choice, UMLet is my second choice.
  47:49If you&#39;re doing a presentation and you wantit
  47:51to look pretty, OmniGraffle then is a goodchoice
  47:54for that.
  47:55OK, so you&#39;re all gonna go and start drawing
  47:56diagrams instead of writing ruby code?
  47:58CROWD: Woo-hoo!
